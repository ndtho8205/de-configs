#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

main() {
  notify=false stdout=false

  _parse_params "$@"

  if [[ $notify == "true" ]]; then
    _send_notification
  fi

  if [[ $stdout == "true" ]]; then
    _get_battery_info
  fi
}

_print_usage() {
  cat <<EOF
usage: $(basename "$0") [OPTION]

Options:
  --notify       Send notification
  --stdout       Print current brightness level
  -h, --help     Show this help and exit
EOF
}

_parse_params() {
  if [[ $# -eq 0 ]]; then
    echo "No option specified."
    echo
    _print_usage
    exit 1
  fi

  local param

  while [[ $# -gt 0 ]]; do
    param="$1"
    shift

    case $param in
    --notify)
      notify=true
      ;;
    --stdout)
      stdout=true
      ;;
    -h | --help)
      _print_usage
      exit 0
      ;;
    *)
      echo "error: unrecognized arguments: $param"
      exit 1
      ;;
    esac
  done
}

_get_battery_info() {
  percentage=$(acpi -b | awk '{print $4}' | sed 's/,//g')
  charge_status=$(acpi -b | awk '{print $3}' | sed 's/,//g')
  time_remaining=$(acpi -b | awk '{print $5}' | sed 's/,//g')

  case $charge_status in
  Full)
    echo " $percentage"
    ;;
  Charging)
    echo " $percentage"
    ;;
  *)
    echo " $percentage $time_remaining"
    ;;
  esac
}

_send_notification() {
  local appname notification_id notification_icon

  appname=$(basename "$0")
  notification_id=$(cksum <<<"$(basename "$0")" | cut -f 1 -d ' ')

  dunstify \
    --appname="$appname" \
    --urgency="low" \
    --icon="$notification_icon" \
    --replace="$notification_id" \
    "Battery" \
    "$(_get_battery_info)"
}

main "$@"
